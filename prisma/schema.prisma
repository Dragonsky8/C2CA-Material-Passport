// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "audit"]
}

model Material {
  id               Int               @id @unique @default(autoincrement())
  dateOfProduction DateTime
  name             String
  producer         String
  materialType     String
  MaterialVersion  MaterialVersion[]

  rawMaterial RawMaterial? @relation("rawMaterial")

  productLink MaterialProductLink[]

  // historyData Material[] @relation("linkToNewRecycling" ,fields: [id], references: [id])

  @@schema("public")
}

// This model links the many-to-many relationship
model MaterialProductLink {
  linkId Int @id @unique @default(autoincrement())

  material   Material @relation(fields: [materialId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  materialId Int
  productId  Int

  @@schema("public")
}

model Product {
  id   Int    @id @unique @default(autoincrement())
  name String

  production      Production[]
  recyclingData   Recycle?              @relation("recyclingData")
  buildData       Build[]
  useData         Use[]
  // Used to fetch the materialId from the rawMaterial side
  rawMaterialLink MaterialProductLink[]

  @@schema("public")
}

model RawMaterial {
  id                           Int     @id @unique
  particleSize                 String?
  grading                      String?
  tolerance                    String?
  granularShape                String?
  grainShape                   String?
  shellContent                 String?
  grainDensity                 String?
  amountFineParts              String?
  qualityFineParts             String?
  roundAndBrokenPieces         String?
  resistanceToCrushing         String?
  waterAbsorption              String?
  classification               String?
  chloride                     String?
  contentOfAcidSolubleSulfate  String?
  contentOfWaterSolubleSulfate String?
  totalSulfur                  String?
  affectBindingTime            String?

  humusOrOrganicMatterContent String?
  AlkaliSilicaActivity        String?
  resistanceToWear            String?
  emissionOfRadioactivity     String?
  leachingOfHeavyMetals       String?
  Asbestos                    String?
  ChimicalComposition         String?
  leachingAnions              String?
  freezeThawSensitivity       String?

  // Ultra-fine data

  fallThrough2mm                String?
  fallThrough0125mm             String?
  fallThrough0063mm             String?
  vormvastheid                  String?
  emissionOfHazardousSubstances String?

  materialParent Material? @relation("rawMaterial", fields: [id], references: [id])

  @@schema("public")
}

model Production {
  id                  Int     @id @unique
  name                String?
  // Dimensions
  weight              String?
  volume              String?
  density             String?
  area                String?
  // Structural Data
  compressionStrength String?
  loadBearing         String?
  stability           String?
  resistance          String?

  productParent Product? @relation(fields: [id], references: [id]) // This links the product page to the RFID in Material

  @@schema("public")
}

model Build {
  id          Int     @id @unique
  name        String?
  constructor String?

  productParent Product? @relation(fields: [id], references: [id])

  @@schema("public")
}

model Use {
  id           Int       @id @unique
  name         String?
  location     String?
  buildingDate DateTime?

  productParent Product? @relation(fields: [id], references: [id])

  @@schema("public")
}

model Recycle {
  id               Int     @id @unique
  name             String?
  recyclingCompany String?

  productParent Product? @relation("recyclingData", fields: [id], references: [id])
  // nextLocation   Material[]  // This should store the ID of the new recycled product or products

  @@schema("public")
}

model Users {
  id              Int               @id @default(autoincrement())
  userName        String
  role            String
  password        String
  MaterialVersion MaterialVersion[]

  @@schema("public")
}

enum AuditOperation {
  INSERT
  UPDATE
  DELETE

  @@schema("audit")
}

// https://github.com/prisma/prisma-client-extensions/tree/main/audit-log-context

model MaterialVersion {
  // Version metadata fields
  versionId         Int            @id @default(autoincrement())
  versionOperation  AuditOperation
  versionMaterialId Int?
  versionUserId     Int?
  versionTimestamp  DateTime

  // Mirrored fields from the Order table
  id               Int
  dateOfProduction DateTime
  name             String
  producer         String
  materialType     String

  material Material? @relation(fields: [versionMaterialId], references: [id])
  user     Users?    @relation(fields: [versionUserId], references: [id])

  @@schema("audit")
}
